{{/* https://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl */}}

{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "upstream" }}
  {{ if .Address }}
    {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
    {{ if and .Container.Node.ID .Address.HostPort }}
      # {{ .Container.Node.Name }}/{{ .Container.Name }}
      server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
    {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
    {{ else if .Network }}
      # {{ .Container.Name }}
      server {{ .Network.IP }}:{{ .Address.Port }};
    {{ end }}
  {{ else if .Network }}
    # {{ .Container.Name }}
    server {{ .Network.IP }} down;
  {{ end }}
{{ end }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
  upstream {{ $host }} {
  {{ range $container := $containers }}
    {{ $addrLen := len $container.Addresses }}
    {{ range $knownNetwork := $CurrentContainer.Networks }}
      {{ range $containerNetwork := $container.Networks }}
        {{ if eq $knownNetwork.Name $containerNetwork.Name }}
          ## Can be connect with "{{ $containerNetwork.Name }}" network
          {{/* If only 1 port exposed, use that */}}
          {{ if eq $addrLen 1 }}
            {{ $address := index $container.Addresses 0 }}
            {{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
          {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
          {{ else }}
            {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
            {{ $address := where $container.Addresses "Port" $port | first }}
            {{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
          {{ end }}
        {{ end }}
      {{ end }}
    {{ end }}
  {{ end }}
  }

  server {
    server_name {{ $host }};
    location / {
      proxy_pass http://{{ trim $host }};
    }
  }
{{ end }}
